/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.svg;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Picture;
import android.util.Log;

import com.caverock.androidsvg.SVG;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.util.TiFileHelper2;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;


@Kroll.module(name="TiSvg", id="ti.svg")
public class TiSvgModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiSvgModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiSvgModule()
	{
		super();
	}


	@Kroll.method
	public TiBlob SVGImage(String args) {
		try {
			if (args.contains(".svg")) {
				Context context = getActivity().getApplicationContext();
				String filePath = TiFileHelper2.getResourcesPath(args);
				InputStream inputStream = context.getAssets().open(filePath);
				SVG svg = SVG.getFromInputStream(inputStream);
				Bitmap bitmap = pictureToBitmap(svg.renderToPicture());
				return TiBlob.blobFromImage(bitmap);
			} else {
				byte[] data = args.getBytes(StandardCharsets.UTF_8);
				InputStream inputStream = new ByteArrayInputStream(data);
				SVG svg = SVG.getFromInputStream(inputStream);
				Bitmap bitmap = pictureToBitmap(svg.renderToPicture());
				return TiBlob.blobFromImage(bitmap);
			}
		} catch (Exception e) {
			Log.e("SVGModule", "Error loading SVG", e);
			return null;
		}
	}

	private Bitmap pictureToBitmap(Picture picture) {
		Bitmap bitmap = Bitmap.createBitmap(picture.getWidth(), picture.getHeight(), Bitmap.Config.ARGB_8888);
		Canvas canvas = new Canvas(bitmap);
		canvas.drawPicture(picture);
		return bitmap;
	}



}

